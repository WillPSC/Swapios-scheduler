"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNamedModule = void 0;
const config_1 = require("../../config");
const getRequireDeclarators_1 = require("../getRequireDeclarators");
const getRequireProperty_1 = require("../getRequireProperty");
const objectPatternPropertyCompareFn_1 = require("../objectPatternPropertyCompareFn");
const addNamedModule = (j, source, options) => {
    const { importedName, localName = importedName, packageName } = options;
    const clientObjectProperty = (0, getRequireProperty_1.getRequireProperty)(j, { importedName, localName });
    const existingRequires = (0, getRequireDeclarators_1.getRequireDeclarators)(j, source, packageName);
    if (existingRequires && existingRequires.nodes().length > 0) {
        const existingRequireProperties = existingRequires
            .filter((variableDeclarator) => variableDeclarator.value.id.type === "ObjectPattern")
            .nodes();
        if (existingRequireProperties.length > 0 &&
            existingRequireProperties.find((variableDeclarator) => variableDeclarator.id.type === "ObjectPattern" &&
                variableDeclarator.id.properties.find((property) => {
                    if (!config_1.OBJECT_PROPERTY_TYPE_LIST.includes(property.type))
                        return false;
                    const key = property.key;
                    const value = property.value;
                    if (key.type !== "Identifier" || value.type !== "Identifier") {
                        return false;
                    }
                    return key.name === importedName && value.name === localName;
                }))) {
            return;
        }
        if (existingRequireProperties.length > 0) {
            const firstRequireProperties = existingRequireProperties[0].id.properties;
            firstRequireProperties.push(clientObjectProperty);
            firstRequireProperties.sort(objectPatternPropertyCompareFn_1.objectPatternPropertyCompareFn);
            return;
        }
    }
    // Build a new require declarator.
    const v3RequireDeclaration = j.variableDeclaration("const", [
        j.variableDeclarator(j.objectPattern([clientObjectProperty]), j.callExpression(j.identifier("require"), [j.literal(packageName)])),
    ]);
    const v2RequireCallExpressions = source
        .find(j.CallExpression, {
        callee: { type: "Identifier", name: "require" },
    })
        .filter((callExpression) => {
        const arg = callExpression.value.arguments[0];
        if (!config_1.STRING_LITERAL_TYPE_LIST.includes(arg.type)) {
            return false;
        }
        const argValue = arg.value;
        return typeof argValue === "string" && argValue.startsWith(config_1.PACKAGE_NAME);
    });
    if (v2RequireCallExpressions.size()) {
        // Insert it after the first v2 require declaration.
        v2RequireCallExpressions.at(0).closest(j.VariableDeclaration).insertAfter(v3RequireDeclaration);
        return;
    }
    // Insert require declarator at the top of the document.
    source.get().node.program.body.unshift(v3RequireDeclaration);
};
exports.addNamedModule = addNamedModule;
